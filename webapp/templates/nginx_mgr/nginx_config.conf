# Nginx configuration for {{ config.domain_name }}
# Generated by Router Manager - {{ config.name }}

{% if config.rate_limit_enabled %}
# Rate limiting zone
limit_req_zone $binary_remote_addr zone={{ config.name }}_limit:10m rate={{ config.rate_limit_rpm }}r/m;
{% endif %}

{% if config.ssl_enabled and config.force_https and ssl_certs_exist %}
# HTTP to HTTPS redirect
server {
    listen 80;
    server_name {{ config.domain_name }};

    # Let's Encrypt challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}
{% endif %}

{% if config.ssl_enabled and not ssl_certs_exist %}
# HTTP-only server for Let's Encrypt challenge and certificate acquisition
server {
    listen 80;
    server_name {{ config.domain_name }};

    # Let's Encrypt challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }

    # Main proxy configuration (over HTTP until certificates are obtained)
    location / {
        proxy_pass {{ config.get_upstream_url }};

        # Basic proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;

        # Proxy timeouts
        proxy_connect_timeout {{ config.proxy_connect_timeout }}s;
        proxy_send_timeout {{ config.proxy_send_timeout }}s;
        proxy_read_timeout {{ config.proxy_read_timeout }}s;

        # HTTP version
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }

    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
{% endif %}

{% if config.ssl_enabled and ssl_certs_exist %}
# Main HTTPS server configuration (with SSL certificates)
server {
    listen 443 ssl;
    server_name {{ config.domain_name }};

    # SSL configuration
    ssl_certificate {{ ssl_cert_path }};
    ssl_certificate_key {{ ssl_key_path }};

    # Basic SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;

    {% if config.custom_headers %}
    # Custom headers
    {% for header_name, header_value in config.custom_headers.items %}
    add_header "{{ header_name }}" "{{ header_value }}" always;
    {% endfor %}
    {% endif %}

    # Client configuration
    client_max_body_size 100M;

    {% if config.rate_limit_enabled %}
    # Rate limiting
    limit_req zone={{ config.name }}_limit burst=20 nodelay;
    limit_req_status 429;
    {% endif %}

    # Logging
    {% if config.access_log_enabled %}
    access_log /var/log/nginx/{{ config.name }}_access.log;
    {% else %}
    access_log off;
    {% endif %}

    {% if config.error_log_enabled %}
    error_log /var/log/nginx/{{ config.name }}_error.log;
    {% endif %}

    # Let's Encrypt challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }

    # Main proxy configuration
    location / {
        proxy_pass {{ config.get_upstream_url }};

        # Basic proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;

        # Proxy timeouts
        proxy_connect_timeout {{ config.proxy_connect_timeout }}s;
        proxy_send_timeout {{ config.proxy_send_timeout }}s;
        proxy_read_timeout {{ config.proxy_read_timeout }}s;

        # HTTP version
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }

    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
{% elif not config.ssl_enabled %}
# Main HTTP server configuration (no SSL)
server {
    listen 80;
    server_name {{ config.domain_name }};

    # General security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;

    {% if config.custom_headers %}
    # Custom headers
    {% for header_name, header_value in config.custom_headers.items %}
    add_header "{{ header_name }}" "{{ header_value }}" always;
    {% endfor %}
    {% endif %}

    # Client configuration
    client_max_body_size 100M;

    {% if config.rate_limit_enabled %}
    # Rate limiting
    limit_req zone={{ config.name }}_limit burst=20 nodelay;
    limit_req_status 429;
    {% endif %}

    # Logging
    {% if config.access_log_enabled %}
    access_log /var/log/nginx/{{ config.name }}_access.log;
    {% else %}
    access_log off;
    {% endif %}

    {% if config.error_log_enabled %}
    error_log /var/log/nginx/{{ config.name }}_error.log;
    {% endif %}

    # Main proxy configuration
    location / {
        proxy_pass {{ config.get_upstream_url }};

        # Basic proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;

        # Proxy timeouts
        proxy_connect_timeout {{ config.proxy_connect_timeout }}s;
        proxy_send_timeout {{ config.proxy_send_timeout }}s;
        proxy_read_timeout {{ config.proxy_read_timeout }}s;

        # HTTP version
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }

    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
{% endif %}
